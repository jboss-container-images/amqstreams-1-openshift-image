apiVersion: v1
kind: Template
metadata:
  name: amqstreams-1-ephemeral
  annotations:
    openshift.io/display-name: "AMQ Streams (Ephemeral storage)"
    description: >-
      Application template for AMQ Streams. It installs Apache Zookeeper and Apache Kafka clusters.


      WARNING: Any data stored will be lost upon pod destruction. Only use this
      template for testing."
    tags: "messaging,datastore,amq"
    iconClass: "fa fa-share-alt fa-flip-horizontal"
message: "Kafka cluster ${CLUSTER_NAME} is being deployed. Use '${CLUSTER_NAME}:9092' as bootstrap server in your application"
parameters:
- description: All OpenShift resources will be named after the cluster name
  displayName: Name of the cluster
  name: CLUSTER_NAME
  value: my-cluster
- description: Number of Zookeeper cluster nodes which will be deployed (odd number of nodes is recomended)
  displayName: Number of Zookeeper cluster nodes (odd number of nodes is recomended)
  name: ZOOKEEPER_NODE_COUNT
  required: true
  value: "1"
- description: Number of Kafka cluster nodes which will be deployed
  displayName: Number of Kafka cluster nodes
  name: KAFKA_NODE_COUNT
  required: true
  value: "3"
- description: Number of seconds after the container has started before healthcheck probes are initiated.
  displayName: Zookeeper healthcheck initial delay
  name: ZOOKEEPER_HEALTHCHECK_DELAY
  value: "15"
- description: Number of seconds after which the probe times out.
  displayName: Zookeeper healthcheck timeout
  name: ZOOKEEPER_HEALTHCHECK_TIMEOUT
  value: "5"
- description: Number of seconds after the container has started before healthcheck probes are initiated.
  displayName: Kafka healthcheck initial delay
  name: KAFKA_HEALTHCHECK_DELAY
  value: "15"
- description: Number of seconds after which the probe times out.
  displayName: Kafka healthcheck timeout
  name: KAFKA_HEALTHCHECK_TIMEOUT
  value: "5"
- description: Default replication factor for newly created topics
  displayName: Default replication factor
  name: KAFKA_DEFAULT_REPLICATION_FACTOR
  value: "1"
- description: Replication factor for offsets topic
  displayName: Offsets replication factor
  name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
  value: "3"
- description: Replication factor for transactions state log topic
  displayName: Transaction state replication factor
  name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
  value: "3"
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}
    labels:
      strimzi.io/type: kafka
      strimzi.io/kind: cluster
  data:
    kafka-nodes: "${KAFKA_NODE_COUNT}"
    kafka-image: "redhat-amqstreams-1/amqstreams10-kafka-openshift:1.0"
    kafka-healthcheck-delay: "${KAFKA_HEALTHCHECK_DELAY}"
    kafka-healthcheck-timeout: "${KAFKA_HEALTHCHECK_TIMEOUT}"
    zookeeper-nodes: "${ZOOKEEPER_NODE_COUNT}"
    zookeeper-image: "redhat-amqstreams-1/amqstreams10-zookeeper-openshift:1.0"
    zookeeper-healthcheck-delay: "${ZOOKEEPER_HEALTHCHECK_DELAY}"
    zookeeper-healthcheck-timeout: "${ZOOKEEPER_HEALTHCHECK_TIMEOUT}"
    KAFKA_DEFAULT_REPLICATION_FACTOR: "${KAFKA_DEFAULT_REPLICATION_FACTOR}"
    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}"
    KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}"
    kafka-storage: |-
      { "type": "ephemeral" }
    zookeeper-storage: |-
      { "type": "ephemeral" }
    kafka-metrics-config: |-
      {
        "lowercaseOutputName": true,
        "rules": [
            {
              "pattern": "kafka.server<type=(.+), name=(.+)PerSec\\w*><>Count",
              "name": "kafka_server_$1_$2_total"
            },
            {
              "pattern": "kafka.server<type=(.+), name=(.+)PerSec\\w*, topic=(.+)><>Count",
              "name": "kafka_server_$1_$2_total",
              "labels":
              {
                "topic": "$3"
              }
            }
        ]
      }
    zookeeper-metrics-config: |-
      {
        "lowercaseOutputName": true
      }
    topic-operator-config: |-
      { }
